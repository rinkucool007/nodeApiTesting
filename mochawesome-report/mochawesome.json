{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2023-02-22T14:02:02.934Z",
    "end": "2023-02-22T14:02:03.033Z",
    "duration": 99,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b4fe32e9-ac3c-4744-abf5-b857b3701091",
      "title": "",
      "fullFile": "C:\\SandBox\\Node\\apiTesting2\\apiTesting1.js",
      "file": "\\apiTesting1.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8f05cf13-2315-4a55-9d47-65d584d62d17",
          "title": "POST /api/users",
          "fullFile": "C:\\SandBox\\Node\\apiTesting2\\apiTesting1.js",
          "file": "\\apiTesting1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user with valid data",
              "fullTitle": "POST /api/users should create a new user with valid data",
              "timedOut": false,
              "duration": 87,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fs.createReadStream('testData.csv')\n  .pipe(csv())\n  .on('data', (data) => {\n    supertest(apiUrl)\n      .post('/api/users')\n      .send({\n        name: data.name,\n        job: data.job\n      })\n      .expect(201)\n      .end((err, res) => {\n        if (err) return done(err);\n        // assertions for successful response\n        console.log(res.body); // log response in console\n        expect(res.body).to.have.property('id');\n        expect(res.body.name).to.equal(data.name);\n        expect(res.body.email).to.equal(data.email);\n      });\n  })\n  .on('end', () => {\n    done();\n  });",
              "err": {},
              "uuid": "8f870ba1-ec16-4434-9c66-f8a204923b22",
              "parentUUID": "8f05cf13-2315-4a55-9d47-65d584d62d17",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8f870ba1-ec16-4434-9c66-f8a204923b22"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 87,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}